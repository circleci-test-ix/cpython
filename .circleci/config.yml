
version: 2.1

# Define templates to be reused across multiple jobs

install_clang: &install_clang
  - run:
      name: Install Clang
      command: |
        apt-get update
        apt install -y software-properties-common
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -        
        apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial main"
        apt-get update
        apt-get install -y clang
        # Set compiler to clang 
        echo 'export CC=${CC:-clang}' >> $BASH_ENV
        echo 'export CC_FOR_BUILD=${CC_FOR_BUILD:-clang}' >> $BASH_ENV

restore_cache: &restore_cache
  - restore_cache:
      key: multissl-{{ arch }}-{{ checksum "/root/multissl/openssl/openssl-1.1.1c.tar.gz" }}
      
save_cache: &save_cache
  - save_cache:
      key: multissl-{{ arch }}-{{ checksum "/root/multissl/openssl/openssl-1.1.1c.tar.gz" }}
      paths:
        - /root/multissl

# before_install template
before_install: &before_install
  - run:
      name: Before Install
      command: |
        set -e
        # Check short-circuit conditions
        if [[ "${TESTING}" != "docs" && "${TESTING}" != "doctest" ]]
        then
          if [[ "$CIRCLE_PR_NUMBER" == "" ]]
          then
            echo "Not a PR, doing full build."
          else
            # Pull requests are slightly complicated because $TRAVIS_COMMIT_RANGE
            # may include more changes than desired if the history is convoluted.
            # Instead, explicitly fetch the base branch and compare against the
            # merge-base commit.
            git fetch -q origin +refs/heads/$CIRCLE_BRANCH
            changes=$(git diff --name-only HEAD $(git merge-base HEAD FETCH_HEAD))
            echo "Files changed:"
            echo "$changes"
            if ! echo "$changes" | grep -qvE '(\.rst$)|(^Doc)|(^Misc)'
            then
              echo "Only docs were updated, stopping build process."
              exit
            fi
          fi
        fi

# install template
install: &install
  - run:
      name: Install
      command: |
        echo "${OPENSSL}"
        echo "${TESTING}"
        echo "${HOME}"
        # Install OpenSSL as necessary
        # Note: doctest needs OpenSSL
        if [[ "${TESTING}" != "docs" ]]
        then
          # clang complains about unused-parameter a lot, redirect stderr
          python3 Tools/ssl/multissltests.py --steps=library \
              --base-directory ${HOME}/multissl \
              --openssl ${OPENSSL} >/dev/null 2>&1
        fi
        openssl version
        ls ${HOME}/multissl
        ls ${HOME}/multissl/openssl
        ls ${HOME}/multissl/src
        
# before_script template
before_script: &before_script
  - run:
      name: Before Script
      command: |
        # -Og is much faster than -O0
        CFLAGS="${CFLAGS} -Og" ./configure --with-pydebug
        make -j4 regen-all
        changes=`git status --porcelain`
        # Check for changes in regenerated files
        if ! test -z "$changes"
        then
          echo "Generated files not up to date"
          echo "$changes"
          exit 1
        fi
        make -j4
        make pythoninfo
        
# script template
script: &script
  - run:
      name: Script
      command: |
        # Using the built Python as patchcheck.py is built around the idea of using
        # a checkout-build of CPython to know things like what base branch the changes
        # should be compared against.
        # Only run on Linux as the check only needs to be run once.
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then ./python Tools/scripts/patchcheck.py --travis $TRAVIS_PULL_REQUEST; fi
        # Check that all symbols exported by libpython start with "Py" or "_Py"
        make smelly
        # `-r -w` implicitly provided through `make buildbottest`.            
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          XVFB_RUN=xvfb-run;
        fi
        $XVFB_RUN make buildbottest TESTOPTS="-j4 -uall,-cpu"
        
# interpolated variables template
set_variables: &set_variables
  - run:
      name: Set Interpolated Variables
      command: |
        echo 'export OPENSSL_DIR='"$HOME/multissl/openssl/${OPENSSL}" >> $BASH_ENV
        echo 'export PATH="${OPENSSL_DIR}/bin:$PATH"' >> $BASH_ENV
        echo 'export CFLAGS="-I${OPENSSL_DIR}/include"' >> $BASH_ENV
        echo 'export LDFLAGS="-L${OPENSSL_DIR}/lib"' >> $BASH_ENV
        # Set rpath with env var instead of -Wl,-rpath linker flag
        # OpenSSL ignores LDFLAGS when linking bin/openssl
        echo 'export LD_RUN_PATH="${OPENSSL_DIR}/lib"' >> $BASH_ENV
        if [[ "$CIRCLE_PR_NUMBER" == "" ]]; then
          echo 'export TRAVIS_PULL_REQUEST="false"' >> $BASH_ENV
        else
          echo 'export TRAVIS_PULL_REQUEST='"${CIRCLE_PR_NUMBER}" >> $BASH_ENV
        fi

jobs:      
  cpython-tests:
    environment:
      OPENSSL: 1.1.1c
      TRAVIS_OS_NAME: linux
    docker:
      - image: buildpack-deps:xenial
    steps:
      - <<: *set_variables
      - <<: *install_clang
      - run: 
          name: Installing APT Packages
          command: apt-get update && apt-get install -y python3 tk-dev uuid-dev gdb xvfb
      - checkout
      - <<: *restore_cache
      - <<: *before_install
      - <<: *install
      - <<: *before_script
      - <<: *script      
      - <<: *save_cache
      
  documentation-build:
    environment:
      OPENSSL: 1.1.1c
      TRAVIS_OS_NAME: linux
      TESTING: docs
    docker:
      - image: circleci/python:3.6.7
    steps:
      - <<: *set_variables
      - checkout
      - <<: *restore_cache
      - <<: *before_install
      - <<: *install
      # update PATH so pip installs are accessible
      - run: echo 'export PATH=/home/circleci/.local/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install Dependencies
          command: |
            cd Doc
            # Sphinx is pinned so that new versions that introduce new warnings won't suddenly cause build failures.
            # (Updating the version is fine as long as no warnings are raised by doing so.)
            # The theme used by the docs is stored separately, so we need to install that as well.
            python -m pip install sphinx==2.0.1 blurb python-docs-theme --user            
      - run:
          name: Build
          command: |
            cd Doc
            make check suspicious html SPHINXOPTS="-q -W -j4"
      - <<: *save_cache

  documentation-tests:
    environment:
      OPENSSL: 1.1.1c
      TRAVIS_OS_NAME: linux
      TESTING: doctest
    docker:
      - image: buildpack-deps:xenial
    steps:
      - <<: *set_variables
      - run: 
          name: Installing APT Packages
          command: apt-get update && apt-get install -y python3 tk-dev uuid-dev xvfb wamerican
      - checkout
      - <<: *restore_cache
      - <<: *before_install
      - <<: *install
      - run:
          name: Setup
          command: |
            ./configure
            make -j4
            make -C Doc/ PYTHON=../python venv
      - run:
          name: Run Tests
          command: xvfb-run make -C Doc/ PYTHON=../python SPHINXOPTS="-q -W -j4" doctest
      - <<: *save_cache
  
  mac-os-tests:
    environment:
      OPENSSL: 1.1.1c      
      OPTIONAL: true
    macos:
      xcode: "10.0"
    steps:
      - <<: *set_variables
      - checkout
      - <<: *restore_cache
      - run:
          name: Before Install
          command: |
            # Python 3 is needed for Argument Clinic and multissl
            HOMEBREW_NO_AUTO_UPDATE=1 brew install xz python3
            export PATH=$(brew --prefix)/bin:$(brew --prefix)/sbin:$PATH
      - <<: *install   
      - <<: *before_script
      - <<: *script
      - <<: *save_cache
  
  test-code-coverage-python:
    environment:
      OPENSSL: 1.1.1c
      TRAVIS_OS_NAME: linux
      OPTIONAL: true
    docker:
      - image: buildpack-deps:xenial
    steps:
      - <<: *set_variables      
      - run: 
          name: Installing APT Packages
          command: apt-get update && apt-get install -y python3 tk-dev uuid-dev xvfb
      - checkout
      - <<: *restore_cache      
      - <<: *before_install
      - <<: *install
      - run:
          name: Setup
          command: |
            ./configure
            make -j4
            # Need a venv that can parse covered code.
            ./python -m venv venv
            ./venv/bin/python -m pip install -U coverage
            ./venv/bin/python -m test.pythoninfo
      - run:
          name: Run Tests
          command: |
            # Skip tests that re-run the entire test suite.
            xvfb-run ./venv/bin/python -m coverage run --branch --pylib -m test --fail-env-changed -uall,-cpu -x test_multiprocessing_fork -x test_multiprocessing_forkserver -x test_multiprocessing_spawn -x test_concurrent_futures || true        
      - run:
          name: Get Coverage
          command: |          
            # Probably should be after_success once test suite updated to run under coverage.py.
            # Make the `coverage` command available to Codecov w/ a version of Python that can parse all source files.
            source ./venv/bin/activate
            bash <(curl -s https://codecov.io/bash)
      - <<: *save_cache
  
  test-code-coverage-C:
    environment:
      OPENSSL: 1.1.1c
      TRAVIS_OS_NAME: linux
      OPTIONAL: true
    docker:
      - image: buildpack-deps:xenial
    steps:
      - <<: *set_variables      
      - run: 
          name: Installing APT Packages
          command: apt-get update && apt-get install -y python3 tk-dev uuid-dev lcov xvfb
      - checkout
      - <<: *restore_cache      
      - <<: *before_install
      - <<: *install
      - run:
          name: Setup
          command: |
            ./configure
      - run:
          name: Run Tests
          command: |
            xvfb-run make -j4 coverage-report
      - run:
          name: Get Coverage
          command: |
            # Probably should be after_success once test suite updated to run under coverage.py.
            make pythoninfo
            bash <(curl -s https://codecov.io/bash)
      - <<: *save_cache

workflows:
  version: 2
  build_and_test:
    jobs:
      - cpython-tests
#       - documentation-build
#       - documentation-tests
#       - mac-os-tests
#       - test-code-coverage-python
#       - test-code-coverage-C
